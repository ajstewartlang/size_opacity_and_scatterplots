ggplot() +
geom_smooth(aes(x = my_rs, y = under_est), colour = "black") +
geom_abline(slope = 1, intercept = 0, linetype = 2) +
ylim(0,1) +
xlim(0,1) +
theme_ggdist() +
theme(axis.title.x = ggtext::element_markdown(size = 16),
axis.title.y = ggtext::element_markdown(size = 16),
axis.text = element_text(size = 14)) +
labs(x = "Objective *r* value",
y = "Subjective *r* value")
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 0.75
#| out-width: "50%"
#| fig-align: "left"
#| fig-cap: Adjusting point opacity to address overplotting. Contrast between the points and the background is full (alpha = 1, L) or low (alpha = .1, R). The dataset used has 40,000 points.
set.seed(123)
data <- data.frame(x = c(rnorm(20000, mean = -1),
rnorm(20000, mean = 1)),
y = rnorm(40000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0,
ifelse(x > 0, 0.1, 1))),
shape = 16) +
geom_vline(xintercept = 0,
linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
#| label: fig-alpha-examples
#| include: true
#| out-width: "50%"
#| fig-cap: Demonstrating the effects of different alpha values on point opacity
#| fig-height: 2
#| fig-align: "left"
x1 <- seq(0,1, length.out = 11)
y1 <- rep(1, times = 11)
df <- data.frame(x1, y1)
ggplot(aes(x1, y1), data = df) +
geom_point(alpha = x1, size = 18, shape = 16) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
rm(x1,y1,df)
View(dot_pitch)
mean(ize_and_opacity_exp_tidy$res_width)
mean(size_and_opacity_exp_tidy$res_width)
range(size_and_opacity_exp_tidy$res_width)
View(size_and_opacity_exp_tidy)
median(size_and_opacity_exp_tidy$res_width)
mode(size_and_opacity_exp_tidy$res_width)
#| label: load-data
# load in data file
# Need higher guess_max so that read_csv() guesses column types correctly
additive_anon <- read_csv("data/additive_data.csv", guess_max = 18001)
#| label: load-data
# load in data file
# Need higher guess_max so that read_csv() guesses column types correctly
additive_anon <- read_csv("data/additive_data.csv")
#| label: load-data
# load in data file
# Need higher guess_max so that read_csv() guesses column types correctly
additive_anon <- read_csv("data/additive_data.csv", guess_max = 18001)
#| label: load-data
# load in data file
# Need higher guess_max so that read_csv() guesses column types correctly
additive_anon <- read_csv("data/additive_data.csv", guess_max = 18000)
additive_anon <- read_csv("data/additive_data.csv", guess_max = 17000)
additive_anon <- read_csv("data/additive_data.csv", guess_max = 18001)
additive_anon <- read_csv("data/additive_data.csv", guess_max = 10000)
additive_anon <- read_csv("data/additive_data.csv", guess_max = 11000)
additive_anon <- read_csv("data/additive_data.csv", guess_max = 12000)
additive_anon <- read_csv("data/additive_data.csv", guess_max = 13000)
additive_anon <- read_csv("data/additive_data.csv", guess_max = 14000)
additive_anon <- read_csv("data/additive_data.csv", guess_max = 17000)
#| label: wrangle-data
## NB: With the exception of anonymization, data are provided as-is from
## pavlovia (survey tool). Wrangling function *must* be run first to make
## the data set usable
# first do literacy
wrangle <- function(anon_file) {
literacy <- anon_file %>%
filter(!is.na(q5_slider.response)) %>%
rowwise() %>%
mutate(literacy = sum(c(q1_slider.response,
q2_slider.response,
q3_slider.response,
q4_slider.response,
q5_slider.response))) %>%
select(participant,
literacy)
# extract and process visual threshold testing
visual_thresholds <- anon_file %>%
filter(!is.na(VT_with_labels)) %>%
select(c("VT_with_labels",
"participant",
"VT_textbox2.text")) %>%
mutate(VT_answer = str_replace(VT_with_labels,
pattern = "vis_threshold_plots/",
replacement = "")) %>%
mutate(VT_answer = str_replace(VT_answer,
pattern = "_VT.png",
replacement = "")) %>%
mutate(correct_VT = case_when(
VT_answer == VT_textbox2.text ~ "y",
VT_answer != VT_textbox2.text ~ "n",
is.na(VT_answer) ~ "n", TRUE ~ as.character(VT_answer))) %>%
group_by(participant) %>%
summarise(VT_no_correct = sum(correct_VT == "y")) %>%
mutate(VT_perc_correct = (VT_no_correct/6)*100) %>%
select("VT_perc_correct",
"VT_no_correct",
"participant")
# extract and process monitor and dot pitch information
# we assume standard 16:9 aspect ratio for monitors
monitor_information <- anon_file %>%
mutate(height = dplyr::lead(height)) %>%
mutate(res_height = res_width*0.5625,
width = height*0.5625,
dot_pitch = ((sqrt(height^2 + width^2))/(sqrt(res_height^2 + res_width^2))) * 25.4) %>%
select(c("dot_pitch",
"participant",
"res_width",
"width",
"height")) %>%
na.omit()
# extract demographic information
# link slider response numbers to gender categories
demographics <- anon_file %>%
filter(!is.na(gender_slider.response)) %>%
mutate(gender_slider.response = recode(gender_slider.response,
`1` = "F",
`2` = "M",
`3` = "NB")) %>%
select(matches(c("participant",
"age_textbox.text",
"gender_slider.response")))
# split images column into item and condition columns
# additionally create "condition_abs" column
# this will be simpler to plot with later
# and allows us to use wrangle function for both experiments
anon_file <- anon_file %>%
mutate(images = str_replace(images, pattern = "A", replacement = "-S-S")) %>%
mutate(images = str_replace(images, pattern = "B", replacement = "-I-I")) %>%
mutate(images = str_replace(images, pattern = "X", replacement = "-S-I")) %>%
mutate(images = str_replace(images, pattern = "Y", replacement = "-I-S")) %>%
separate(images, c("item",
"opacity",
"size"),
sep = "-") %>%
mutate(size = str_replace(size, pattern = ".png", replacement = "")) %>%
mutate(condition_abs = case_when(
opacity == "S" & size == "S" ~ "A",
opacity == "I" & size == "I" ~ "B",
opacity == "S" & size == "I" ~ "X",
opacity == "I" & size == "S" ~ "Y",
TRUE ~ "placeholder"
))
# select relevant columns
# select only experimental items
# add literacy data
# change data types where appropriate
# output this file with suffix 'tidy'
anon_file %>%
select(c("participant",
"item",
"size",
"opacity",
"slider.response",
"my_rs",
"total_residuals",
"unique_item_no",
"session",
"trials.thisN",
"condition_abs")) %>%
mutate(half = case_when(
trials.thisN < 93 ~ "First",
trials.thisN > 92 ~ "Second" )) %>% # used for training testing later on
filter(unique_item_no < 181) %>%
inner_join(literacy, by = "participant") %>%
inner_join(demographics, by = "participant") %>%
inner_join(monitor_information, by = "participant") %>%
inner_join(visual_thresholds, by = "participant") %>%
mutate(across(matches(c("item", "opacity", "size", "condition_abs")), as_factor)) %>%
mutate(trials.thisN = as.integer(trials.thisN)) %>%
mutate(difference = my_rs - slider.response) %>%
select(-c("__participant")) %>%
assign(paste0(unique(anon_file$expName), "_tidy"),
value = ., envir = .GlobalEnv)
}
# use wrangle function on anonmyised data file
wrangle(additive_anon)
# set deviation coding for experimental model
contrasts(size_and_opacity_exp_tidy$size) <- matrix(c(.5, -.5))
contrasts(size_and_opacity_exp_tidy$opacity) <- matrix(c(.5, -.5))
# remove anon df from environment
rm(additive_anon)
# extract age data
age <- distinct(size_and_opacity_exp_tidy, participant,
.keep_all = TRUE) %>%
summarise(mean = mean(age_textbox.text, na.rm = TRUE),
sd = sd(age_textbox.text, na.rm = TRUE))
sum(is.na(size_and_opacity_exp_tidy$age_textbox.text))
# extract gender data
gender <- distinct(size_and_opacity_exp_tidy, participant,
.keep_all = TRUE) %>%
group_by(gender_slider.response) %>%
summarise(perc = n()/nrow(.)*100) %>%
pivot_wider(names_from = gender_slider.response, values_from = perc)
# extract literacy data
literacy <- distinct(size_and_opacity_exp_tidy, participant,
.keep_all = TRUE) %>%
summarise(mean = mean(literacy), sd = sd(literacy))
# extract visual threshold data
VT <- size_and_opacity_exp_tidy %>%
summarise(mean_VT_no_correct = mean(VT_no_correct),
sd_VT_no_correct = sd(VT_no_correct),
mean_VT_perc_correct = mean(VT_perc_correct),
sd_VT_perc_correct = sd(VT_perc_correct))
# extract dot pitch data
dot_pitch <- size_and_opacity_exp_tidy %>%
summarise(mean_dp = mean(dot_pitch),
sd_dp = sd(dot_pitch))
range(size_and_opacity_exp_tidy$height)
sd(size_and_opacity_exp_tidy$height)
mean(size_and_opacity_exp_tidy$height)
mean(size_and_opacity_exp_tidy$width)
1/0.5625
#| label: wrangle-data
## NB: With the exception of anonymization, data are provided as-is from
## pavlovia (survey tool). Wrangling function *must* be run first to make
## the data set usable
# first do literacy
wrangle <- function(anon_file) {
literacy <- anon_file %>%
filter(!is.na(q5_slider.response)) %>%
rowwise() %>%
mutate(literacy = sum(c(q1_slider.response,
q2_slider.response,
q3_slider.response,
q4_slider.response,
q5_slider.response))) %>%
select(participant,
literacy)
# extract and process visual threshold testing
visual_thresholds <- anon_file %>%
filter(!is.na(VT_with_labels)) %>%
select(c("VT_with_labels",
"participant",
"VT_textbox2.text")) %>%
mutate(VT_answer = str_replace(VT_with_labels,
pattern = "vis_threshold_plots/",
replacement = "")) %>%
mutate(VT_answer = str_replace(VT_answer,
pattern = "_VT.png",
replacement = "")) %>%
mutate(correct_VT = case_when(
VT_answer == VT_textbox2.text ~ "y",
VT_answer != VT_textbox2.text ~ "n",
is.na(VT_answer) ~ "n", TRUE ~ as.character(VT_answer))) %>%
group_by(participant) %>%
summarise(VT_no_correct = sum(correct_VT == "y")) %>%
mutate(VT_perc_correct = (VT_no_correct/6)*100) %>%
select("VT_perc_correct",
"VT_no_correct",
"participant")
# extract and process monitor and dot pitch information
# we assume standard 16:9 aspect ratio for monitors
monitor_information <- anon_file %>%
mutate(height = dplyr::lead(height)) %>%
mutate(res_height = res_width*0.5625,
width = height*1.777,
dot_pitch = ((sqrt(height^2 + width^2))/(sqrt(res_height^2 + res_width^2))) * 25.4) %>%
select(c("dot_pitch",
"participant",
"res_width",
"width",
"height")) %>%
na.omit()
# extract demographic information
# link slider response numbers to gender categories
demographics <- anon_file %>%
filter(!is.na(gender_slider.response)) %>%
mutate(gender_slider.response = recode(gender_slider.response,
`1` = "F",
`2` = "M",
`3` = "NB")) %>%
select(matches(c("participant",
"age_textbox.text",
"gender_slider.response")))
# split images column into item and condition columns
# additionally create "condition_abs" column
# this will be simpler to plot with later
# and allows us to use wrangle function for both experiments
anon_file <- anon_file %>%
mutate(images = str_replace(images, pattern = "A", replacement = "-S-S")) %>%
mutate(images = str_replace(images, pattern = "B", replacement = "-I-I")) %>%
mutate(images = str_replace(images, pattern = "X", replacement = "-S-I")) %>%
mutate(images = str_replace(images, pattern = "Y", replacement = "-I-S")) %>%
separate(images, c("item",
"opacity",
"size"),
sep = "-") %>%
mutate(size = str_replace(size, pattern = ".png", replacement = "")) %>%
mutate(condition_abs = case_when(
opacity == "S" & size == "S" ~ "A",
opacity == "I" & size == "I" ~ "B",
opacity == "S" & size == "I" ~ "X",
opacity == "I" & size == "S" ~ "Y",
TRUE ~ "placeholder"
))
# select relevant columns
# select only experimental items
# add literacy data
# change data types where appropriate
# output this file with suffix 'tidy'
anon_file %>%
select(c("participant",
"item",
"size",
"opacity",
"slider.response",
"my_rs",
"total_residuals",
"unique_item_no",
"session",
"trials.thisN",
"condition_abs")) %>%
mutate(half = case_when(
trials.thisN < 93 ~ "First",
trials.thisN > 92 ~ "Second" )) %>% # used for training testing later on
filter(unique_item_no < 181) %>%
inner_join(literacy, by = "participant") %>%
inner_join(demographics, by = "participant") %>%
inner_join(monitor_information, by = "participant") %>%
inner_join(visual_thresholds, by = "participant") %>%
mutate(across(matches(c("item", "opacity", "size", "condition_abs")), as_factor)) %>%
mutate(trials.thisN = as.integer(trials.thisN)) %>%
mutate(difference = my_rs - slider.response) %>%
select(-c("__participant")) %>%
assign(paste0(unique(anon_file$expName), "_tidy"),
value = ., envir = .GlobalEnv)
}
# use wrangle function on anonmyised data file
wrangle(additive_anon)
#| label: load-data
# load in data file
# Need higher guess_max so that read_csv() guesses column types correctly
additive_anon <- read_csv("data/additive_data.csv", guess_max = 17000)
#| label: wrangle-data
## NB: With the exception of anonymization, data are provided as-is from
## pavlovia (survey tool). Wrangling function *must* be run first to make
## the data set usable
# first do literacy
wrangle <- function(anon_file) {
literacy <- anon_file %>%
filter(!is.na(q5_slider.response)) %>%
rowwise() %>%
mutate(literacy = sum(c(q1_slider.response,
q2_slider.response,
q3_slider.response,
q4_slider.response,
q5_slider.response))) %>%
select(participant,
literacy)
# extract and process visual threshold testing
visual_thresholds <- anon_file %>%
filter(!is.na(VT_with_labels)) %>%
select(c("VT_with_labels",
"participant",
"VT_textbox2.text")) %>%
mutate(VT_answer = str_replace(VT_with_labels,
pattern = "vis_threshold_plots/",
replacement = "")) %>%
mutate(VT_answer = str_replace(VT_answer,
pattern = "_VT.png",
replacement = "")) %>%
mutate(correct_VT = case_when(
VT_answer == VT_textbox2.text ~ "y",
VT_answer != VT_textbox2.text ~ "n",
is.na(VT_answer) ~ "n", TRUE ~ as.character(VT_answer))) %>%
group_by(participant) %>%
summarise(VT_no_correct = sum(correct_VT == "y")) %>%
mutate(VT_perc_correct = (VT_no_correct/6)*100) %>%
select("VT_perc_correct",
"VT_no_correct",
"participant")
# extract and process monitor and dot pitch information
# we assume standard 16:9 aspect ratio for monitors
monitor_information <- anon_file %>%
mutate(height = dplyr::lead(height)) %>%
mutate(res_height = res_width*0.5625,
width = height*1.777,
dot_pitch = ((sqrt(height^2 + width^2))/(sqrt(res_height^2 + res_width^2))) * 25.4) %>%
select(c("dot_pitch",
"participant",
"res_width",
"width",
"height")) %>%
na.omit()
# extract demographic information
# link slider response numbers to gender categories
demographics <- anon_file %>%
filter(!is.na(gender_slider.response)) %>%
mutate(gender_slider.response = recode(gender_slider.response,
`1` = "F",
`2` = "M",
`3` = "NB")) %>%
select(matches(c("participant",
"age_textbox.text",
"gender_slider.response")))
# split images column into item and condition columns
# additionally create "condition_abs" column
# this will be simpler to plot with later
# and allows us to use wrangle function for both experiments
anon_file <- anon_file %>%
mutate(images = str_replace(images, pattern = "A", replacement = "-S-S")) %>%
mutate(images = str_replace(images, pattern = "B", replacement = "-I-I")) %>%
mutate(images = str_replace(images, pattern = "X", replacement = "-S-I")) %>%
mutate(images = str_replace(images, pattern = "Y", replacement = "-I-S")) %>%
separate(images, c("item",
"opacity",
"size"),
sep = "-") %>%
mutate(size = str_replace(size, pattern = ".png", replacement = "")) %>%
mutate(condition_abs = case_when(
opacity == "S" & size == "S" ~ "A",
opacity == "I" & size == "I" ~ "B",
opacity == "S" & size == "I" ~ "X",
opacity == "I" & size == "S" ~ "Y",
TRUE ~ "placeholder"
))
# select relevant columns
# select only experimental items
# add literacy data
# change data types where appropriate
# output this file with suffix 'tidy'
anon_file %>%
select(c("participant",
"item",
"size",
"opacity",
"slider.response",
"my_rs",
"total_residuals",
"unique_item_no",
"session",
"trials.thisN",
"condition_abs")) %>%
mutate(half = case_when(
trials.thisN < 93 ~ "First",
trials.thisN > 92 ~ "Second" )) %>% # used for training testing later on
filter(unique_item_no < 181) %>%
inner_join(literacy, by = "participant") %>%
inner_join(demographics, by = "participant") %>%
inner_join(monitor_information, by = "participant") %>%
inner_join(visual_thresholds, by = "participant") %>%
mutate(across(matches(c("item", "opacity", "size", "condition_abs")), as_factor)) %>%
mutate(trials.thisN = as.integer(trials.thisN)) %>%
mutate(difference = my_rs - slider.response) %>%
select(-c("__participant")) %>%
assign(paste0(unique(anon_file$expName), "_tidy"),
value = ., envir = .GlobalEnv)
}
# use wrangle function on anonmyised data file
wrangle(additive_anon)
# set deviation coding for experimental model
contrasts(size_and_opacity_exp_tidy$size) <- matrix(c(.5, -.5))
contrasts(size_and_opacity_exp_tidy$opacity) <- matrix(c(.5, -.5))
# remove anon df from environment
rm(additive_anon)
# extract age data
age <- distinct(size_and_opacity_exp_tidy, participant,
.keep_all = TRUE) %>%
summarise(mean = mean(age_textbox.text, na.rm = TRUE),
sd = sd(age_textbox.text, na.rm = TRUE))
sum(is.na(size_and_opacity_exp_tidy$age_textbox.text))
# extract gender data
gender <- distinct(size_and_opacity_exp_tidy, participant,
.keep_all = TRUE) %>%
group_by(gender_slider.response) %>%
summarise(perc = n()/nrow(.)*100) %>%
pivot_wider(names_from = gender_slider.response, values_from = perc)
# extract literacy data
literacy <- distinct(size_and_opacity_exp_tidy, participant,
.keep_all = TRUE) %>%
summarise(mean = mean(literacy), sd = sd(literacy))
# extract visual threshold data
VT <- size_and_opacity_exp_tidy %>%
summarise(mean_VT_no_correct = mean(VT_no_correct),
sd_VT_no_correct = sd(VT_no_correct),
mean_VT_perc_correct = mean(VT_perc_correct),
sd_VT_perc_correct = sd(VT_perc_correct))
# extract dot pitch data
dot_pitch <- size_and_opacity_exp_tidy %>%
summarise(mean_dp = mean(dot_pitch),
sd_dp = sd(dot_pitch))
mean(size_and_opacity_exp_tidy$width)
range(size_and_opacity_exp_tidy$width)
View(size_and_opacity_exp_tidy)
#| label: load-data
# load in data file
# Need higher guess_max so that read_csv() guesses column types correctly
additive_anon <- read_csv("data/additive_data.csv", guess_max = 17000)
View(additive_anon)

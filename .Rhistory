y = "") +
theme(axis.text = element_blank())
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 1
#| out-width: "50%"
#| fig-align: "left"
set.seed(123)
data <- data.frame(x = c(rnorm(5000, mean = 1), rnorm(5000, mean = 1)),
y = rnorm(10000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.1, 1)))) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
hist(data)
hist(data$x)
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 1
#| out-width: "50%"
#| fig-align: "left"
set.seed(123)
data <- data.frame(x = c(rnorm(5000, mean = 1), rnorm(5000, mean = -1)),
y = rnorm(10000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.1, 1)))) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
#| label: setup
set.seed(1234) # seed for all random number generation
# Loading packages
library(tidyverse)
library(MASS)
library(emmeans)
library(scales)
library(buildmer)
library(lme4)
library(kableExtra)
library(afex)
library(papaja)
library(broom.mixed)
library(insight)
library(qwraps2)
library(lmerTest)
library(ggdist)
library(ggpubr)
library(conflicted)
library(EMAtools)
library(geomtextpath)
# fix conflicts now using the conflicted package
conflicts_prefer(dplyr::select(), dplyr::filter(), lme4::lmer())
#| label: lazyload-cache
if (!params$eval_models){ lazyload_cache_dir("size_and_contrast_new/") }
#| label: load-data
# load in data file
# Need higher guess_max so that read_csv() guesses column types correctly
additive_anon <- read_csv("data/additive_data.csv", guess_max = 18001)
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 1
#| out-width: "50%"
#| fig-align: "left"
set.seed(123)
data <- data.frame(x = c(rnorm(5000, mean = 1), rnorm(5000, mean = -1)),
y = rnorm(10000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.1, 1)))) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 1
#| out-width: "50%"
#| fig-align: "left"
set.seed(123)
data <- data.frame(x = c(rnorm(5000, mean = -1), rnorm(5000, mean = 1)),
y = rnorm(10000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.1, 1)))) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 1
#| out-width: "50%"
#| fig-align: "left"
set.seed(123)
data <- data.frame(x = c(rnorm(5000, mean = -1), rnorm(5000, mean = 1)),
y = rnorm(10000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.2, 1)))) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 1
#| out-width: "50%"
#| fig-align: "left"
set.seed(123)
data <- data.frame(x = c(rnorm(5000, mean = -1), rnorm(5000, mean = 1)),
y = rnorm(10000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.2, 1))),
shape = 16) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 0.75
#| out-width: "50%"
#| fig-align: "left"
#| fig-cap: Adjusting point contrast to address overplotting. Contrast between the points and the background is full (alpha = 1, L) or low (alpha = 0.2, R).
set.seed(123)
data <- data.frame(x = c(rnorm(20000, mean = -1), rnorm(20000, mean = 1)),
y = rnorm(40000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.1, 1))),
shape = 16) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 0.75
#| out-width: "50%"
#| fig-align: "left"
#| fig-cap: Adjusting point contrast to address overplotting. Contrast between the points and the background is full (alpha = 1, L) or low (alpha = 0.2, R).
set.seed(123)
data <- data.frame(x = c(rnorm(20000, mean = -1), rnorm(20000, mean = 1)),
y = rnorm(40000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.05, 1))),
shape = 16) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
#| label: fig-overplotting-examples
#| include: true
#| fig-asp: 0.75
#| out-width: "50%"
#| fig-align: "left"
#| fig-cap: Adjusting point contrast to address overplotting. Contrast between the points and the background is full (alpha = 1, L) or low (alpha = 0.2, R).
set.seed(123)
data <- data.frame(x = c(rnorm(20000, mean = -1), rnorm(20000, mean = 1)),
y = rnorm(40000))
ggplot(data, aes(x = x, y = y)) +
scale_alpha_identity() +
geom_point(aes(alpha = ifelse(x > -0.1 & x < 0.1, 0, ifelse(x > 0, 0.075, 1))),
shape = 16) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_ggdist() +
labs(x = "",
y = "") +
theme(axis.text = element_blank())
View(VT)
#| label: fig-alpha-examples
#| include: true
#| out-width: "50%"
#| fig-cap: Demonstrating the effects of different alpha values on point contrast.
x1 <- seq(0,1, length.out = 11)
y1 <- rep(1, times = 11)
df <- data.frame(x1, y1)
ggplot(aes(x1, y1), data = df) +
geom_point(alpha = x1, size = 18, shape = 16) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
rm(x1,y1,df)
#| label: setup
set.seed(1234) # seed for all random number generation
# Loading packages
library(tidyverse)
library(MASS)
library(emmeans)
library(scales)
library(buildmer)
library(lme4)
library(kableExtra)
library(afex)
library(papaja)
library(broom.mixed)
library(insight)
library(qwraps2)
library(lmerTest)
library(ggdist)
library(ggpubr)
library(conflicted)
library(EMAtools)
library(geomtextpath)
# fix conflicts now using the conflicted package
conflicts_prefer(dplyr::select(), dplyr::filter(), lme4::lmer())
# Load necessary libraries
library(ggplot2)
# Create a sample dataset (replace this with your data)
set.seed(123)
df <- data.frame(x = seq(1, 10, by = 0.5),
y = 2 * sin(x) + rnorm(10, mean = 0, sd = 0.5))
df <- data.frame(x = seq(1, 10, by = 0.5),
y = 2 * sin(x) + rnorm(10, mean = 0, sd = 0.5))
# Load necessary libraries
library(ggplot2)
# Create a sample dataset (replace this with your data)
set.seed(123)
df <- data.frame(x = seq(1, 10, by = 0.5),
y = 2 * sin(x) + rnorm(10, mean = 0, sd = 0.5))
df <- data_frame(x = seq(1, 10, by = 0.5),
y = 2 * sin(x) + rnorm(10, mean = 0, sd = 0.5))
# Create the plot with geom_smooth
p <- ggplot(df, aes(x, y)) +
geom_point() +  # Add points
geom_smooth(method = "lm", se = FALSE) +  # Add a smoothed curve without shading
# Add a shaded area under the curve using geom_ribbon
p + geom_ribbon(data = df, aes(x = x, ymin = y, ymax = predict(lm(y ~ x, df)), fill = "Shaded Area"), alpha = 0.3) +
scale_fill_manual(values = "blue")  # Change the fill color if needed
# Create the plot with geom_smooth
p <- ggplot(df, aes(x, y)) +
geom_point() +  # Add points
geom_smooth(method = "lm", se = FALSE)  # Add a smoothed curve without shading
# Add a shaded area under the curve using geom_ribbon
p + geom_ribbon(data = df, aes(x = x, ymin = y, ymax = predict(lm(y ~ x, df)), fill = "Shaded Area"), alpha = 0.3) +
scale_fill_manual(values = "blue")  # Change the fill color if needed
# Create the plot with geom_smooth
p <- ggplot(df, aes(x, y)) +
#geom_point() +  # Add points
geom_smooth(method = "lm", se = FALSE)  # Add a smoothed curve without shading
# Add a shaded area under the curve using geom_ribbon
p + geom_ribbon(data = df, aes(x = x, ymin = y, ymax = predict(lm(y ~ x, df)), fill = "Shaded Area"), alpha = 0.3) +
scale_fill_manual(values = "blue")  # Change the fill color if needed
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power", "my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power", "my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1) +
ylim(0,0.3)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power", "my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1) +
ylim(-0.2,0.3)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power", "my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1) +
ylim(-0.1,0.3)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power", "my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1) +
ylim(-0.05,0.3)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power", "my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1) +
ylim(-0.06,0.3)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power", "my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1) +
ylim(-0.075,0.3)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: additive_raw_pl = observed values for present study. standard_curve = no manipulation averaged across all experiments
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
curves %>%
drop_na() %>%
select(c("contrast_power", "size_power", "additive_power", "my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 6.5),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1) +
ylim(-0.1,0.3)

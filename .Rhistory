V1 <- seq(-10, 10, length.out = 128)
V2 <- 2 * V1^2 + rnorm(length(V1), mean = 0, sd = 10)
NL_data <- data.frame(V1, V2)
# make plot
NL_corr_plot <- plot_example_function(NL_data,
0.05,
0,
"Non-linear\ncorrelation") +
tasks_theme() +
geom_point(aes(alpha = 1),
size = 0.2)
# arrange the four task example plots
ggarrange(corr_plot,
cluster_sep_plot,
outlier_plot,
NL_corr_plot,
nrow = 1)
corr_plot <- plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = 1, y = 1, label = "asd")
#| label: fig-tasks
#| include: true
#| out-width: "100%"
#| fig-asp: 0.25
#| fig-cap: Examples of scatterplots designed for different scatterplot-associated tasks. Both colour and point shape have been used to delineate different clusters in the cluster separation plot.
# set random seed for reproducibility
set.seed(123)
# create theme so that newly generated plots match the plot example function
tasks_theme <- function() {
theme_classic() %+replace%
theme(axis.text = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
legend.position = "none",
plot.title = element_text(size = 7.5, hjust = 0, vjust = 1),
axis.title = element_blank(),
axis.line = element_line(linewidth = 0.25),
axis.ticks = element_line(linewidth = 0.25),
axis.ticks.length = unit(1.375, "pt"))
}
## Create correlation plot
corr_plot <- plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = 1, y = 1, label = "asd")
## Create cluster separation plot
# cluster sep data
n <- 128
cluster_sep_data <- data.frame(
x = c(rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 4, sd = 1), rnorm(n, mean = 8, sd = 1)),
y = c(rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 4, sd = 1), rnorm(n, mean = 0, sd = 1)),
cluster = factor(rep(1:3, each = n)))
# create plot
cluster_sep_plot <- ggplot(cluster_sep_data, aes(x = x, y = y, colour = cluster)) +
geom_point(size = 0.6, aes(shape = cluster)) +
scale_size_identity() +
tasks_theme() +
labs(title = "Cluster\nSeparation")
## Outlier detection plot
# make data
n <- 127
x <- runif(n, 0, 100)
y <- 2 * x + 5 + rnorm(n, 0, 10)
x <- c(x, 35)
y <- c(y, 200)
data <- data.frame(x, y)
# create plot
outlier_plot <- ggplot(data, aes(x, y)) +
geom_point(size = 0.2) +
scale_size_identity() +
tasks_theme() +
labs(title = "Scatterplot with\nObvious Outlier") +
ylim(0,300)
## Non-linear correlation plot
# make data
V1 <- seq(-10, 10, length.out = 128)
V2 <- 2 * V1^2 + rnorm(length(V1), mean = 0, sd = 10)
NL_data <- data.frame(V1, V2)
# make plot
NL_corr_plot <- plot_example_function(NL_data,
0.05,
0,
"Non-linear\ncorrelation") +
tasks_theme() +
geom_point(aes(alpha = 1),
size = 0.2)
# arrange the four task example plots
ggarrange(corr_plot,
cluster_sep_plot,
outlier_plot,
NL_corr_plot,
nrow = 1)
#| label: fig-tasks
#| include: true
#| out-width: "100%"
#| fig-asp: 0.25
#| fig-cap: Examples of scatterplots designed for different scatterplot-associated tasks. Both colour and point shape have been used to delineate different clusters in the cluster separation plot.
# set random seed for reproducibility
set.seed(123)
# create theme so that newly generated plots match the plot example function
tasks_theme <- function() {
theme_classic() %+replace%
theme(axis.text = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
legend.position = "none",
plot.title = element_text(size = 7.5, hjust = 0, vjust = 1),
axis.title = element_blank(),
axis.line = element_line(linewidth = 0.25),
axis.ticks = element_line(linewidth = 0.25),
axis.ticks.length = unit(1.375, "pt"))
}
## Create correlation plot
corr_plot <- plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = 0.2, y = 1.5, label = "r = 0.6")
## Create cluster separation plot
# cluster sep data
n <- 128
cluster_sep_data <- data.frame(
x = c(rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 4, sd = 1), rnorm(n, mean = 8, sd = 1)),
y = c(rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 4, sd = 1), rnorm(n, mean = 0, sd = 1)),
cluster = factor(rep(1:3, each = n)))
# create plot
cluster_sep_plot <- ggplot(cluster_sep_data, aes(x = x, y = y, colour = cluster)) +
geom_point(size = 0.6, aes(shape = cluster)) +
scale_size_identity() +
tasks_theme() +
labs(title = "Cluster\nSeparation")
## Outlier detection plot
# make data
n <- 127
x <- runif(n, 0, 100)
y <- 2 * x + 5 + rnorm(n, 0, 10)
x <- c(x, 35)
y <- c(y, 200)
data <- data.frame(x, y)
# create plot
outlier_plot <- ggplot(data, aes(x, y)) +
geom_point(size = 0.2) +
scale_size_identity() +
tasks_theme() +
labs(title = "Scatterplot with\nObvious Outlier") +
ylim(0,300)
## Non-linear correlation plot
# make data
V1 <- seq(-10, 10, length.out = 128)
V2 <- 2 * V1^2 + rnorm(length(V1), mean = 0, sd = 10)
NL_data <- data.frame(V1, V2)
# make plot
NL_corr_plot <- plot_example_function(NL_data,
0.05,
0,
"Non-linear\ncorrelation") +
tasks_theme() +
geom_point(aes(alpha = 1),
size = 0.2)
# arrange the four task example plots
ggarrange(corr_plot,
cluster_sep_plot,
outlier_plot,
NL_corr_plot,
nrow = 1)
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = 0.2, y = 1.5, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = 0.1, y = 1.5, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = 0.01, y = 1.5, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = 2, y = 1.5, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = -1, y = 1.5, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = -1.5, y = 1.5, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = -2, y = 1.5, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = -4, y = 1.5, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = -4, y = 2, label = "r = 0.6")
plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = -4, y = 2, label = "r = 0.6", size = 3)
#| label: fig-tasks
#| include: true
#| out-width: "100%"
#| fig-asp: 0.25
#| fig-cap: Examples of scatterplots designed for different scatterplot-associated tasks. Both colour and point shape have been used to delineate different clusters in the cluster separation plot.
# set random seed for reproducibility
set.seed(123)
# create theme so that newly generated plots match the plot example function
tasks_theme <- function() {
theme_classic() %+replace%
theme(axis.text = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
legend.position = "none",
plot.title = element_text(size = 7.5, hjust = 0, vjust = 1),
axis.title = element_blank(),
axis.line = element_line(linewidth = 0.25),
axis.ticks = element_line(linewidth = 0.25),
axis.ticks.length = unit(1.375, "pt"))
}
## Create correlation plot
corr_plot <- plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = -3, y = 2, label = "r = 0.6", size = 3.5)
## Create cluster separation plot
# cluster sep data
n <- 128
cluster_sep_data <- data.frame(
x = c(rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 4, sd = 1), rnorm(n, mean = 8, sd = 1)),
y = c(rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 4, sd = 1), rnorm(n, mean = 0, sd = 1)),
cluster = factor(rep(1:3, each = n)))
# create plot
cluster_sep_plot <- ggplot(cluster_sep_data, aes(x = x, y = y, colour = cluster)) +
geom_point(size = 0.6, aes(shape = cluster)) +
scale_size_identity() +
tasks_theme() +
labs(title = "Cluster\nSeparation")
## Outlier detection plot
# make data
n <- 127
x <- runif(n, 0, 100)
y <- 2 * x + 5 + rnorm(n, 0, 10)
x <- c(x, 35)
y <- c(y, 200)
data <- data.frame(x, y)
# create plot
outlier_plot <- ggplot(data, aes(x, y)) +
geom_point(size = 0.2) +
scale_size_identity() +
tasks_theme() +
labs(title = "Scatterplot with\nObvious Outlier") +
ylim(0,300)
## Non-linear correlation plot
# make data
V1 <- seq(-10, 10, length.out = 128)
V2 <- 2 * V1^2 + rnorm(length(V1), mean = 0, sd = 10)
NL_data <- data.frame(V1, V2)
# make plot
NL_corr_plot <- plot_example_function(NL_data,
0.05,
0,
"Non-linear\ncorrelation") +
tasks_theme() +
geom_point(aes(alpha = 1),
size = 0.2)
# arrange the four task example plots
ggarrange(corr_plot,
cluster_sep_plot,
outlier_plot,
NL_corr_plot,
nrow = 1)
#| label: fig-tasks
#| include: true
#| out-width: "100%"
#| fig-asp: 0.25
#| fig-cap: Examples of scatterplots designed for different scatterplot-associated tasks. Both colour and point shape have been used to delineate different clusters in the cluster separation plot.
# set random seed for reproducibility
set.seed(123)
# create theme so that newly generated plots match the plot example function
tasks_theme <- function() {
theme_classic() %+replace%
theme(axis.text = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
legend.position = "none",
plot.title = element_text(size = 7.5, hjust = 0, vjust = 1),
axis.title = element_blank(),
axis.line = element_line(linewidth = 0.25),
axis.ticks = element_line(linewidth = 0.25),
axis.ticks.length = unit(1.375, "pt"))
}
## Create correlation plot
corr_plot <- plot_example_function(slopes,
0.05,
0,
"Correlation\nPerception") +
tasks_theme() +
geom_point(aes(alpha = 1), size = 0.5) +
annotate(geom = "text", x = -2, y = 2, label = "r = 0.6", size = 3.5)
## Create cluster separation plot
# cluster sep data
n <- 128
cluster_sep_data <- data.frame(
x = c(rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 4, sd = 1), rnorm(n, mean = 8, sd = 1)),
y = c(rnorm(n, mean = 0, sd = 1), rnorm(n, mean = 4, sd = 1), rnorm(n, mean = 0, sd = 1)),
cluster = factor(rep(1:3, each = n)))
# create plot
cluster_sep_plot <- ggplot(cluster_sep_data, aes(x = x, y = y, colour = cluster)) +
geom_point(size = 0.6, aes(shape = cluster)) +
scale_size_identity() +
tasks_theme() +
labs(title = "Cluster\nSeparation")
## Outlier detection plot
# make data
n <- 127
x <- runif(n, 0, 100)
y <- 2 * x + 5 + rnorm(n, 0, 10)
x <- c(x, 35)
y <- c(y, 200)
data <- data.frame(x, y)
# create plot
outlier_plot <- ggplot(data, aes(x, y)) +
geom_point(size = 0.2) +
scale_size_identity() +
tasks_theme() +
labs(title = "Scatterplot with\nObvious Outlier") +
ylim(0,300)
## Non-linear correlation plot
# make data
V1 <- seq(-10, 10, length.out = 128)
V2 <- 2 * V1^2 + rnorm(length(V1), mean = 0, sd = 10)
NL_data <- data.frame(V1, V2)
# make plot
NL_corr_plot <- plot_example_function(NL_data,
0.05,
0,
"Non-linear\ncorrelation") +
tasks_theme() +
geom_point(aes(alpha = 1),
size = 0.2)
# arrange the four task example plots
ggarrange(corr_plot,
cluster_sep_plot,
outlier_plot,
NL_corr_plot,
nrow = 1)
For discriminability reasons, scatterplots visualizing large datasets tend also to
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: Power is the different between what is observed when a decay function/combination of decay functions is used and what is observed when no manipulation is used. The dashed line represents the power that would be required to correct for the underestimation of correlation in scatterplots.
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
# create necessary power curve
necessary_power <- curves %>% select(c("my_rs", "standard_curve")) %>%
mutate(mirror = my_rs-standard_curve)
curves %>%
drop_na() %>%
select(c("contrast_power",
"size_power",
"additive_power",
"my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 7),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5, labeller = labeller(factor = labels_power)) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
geom_smooth(data = necessary_power,
aes(x = my_rs, y = mirror),
se = F,
linetype = 2,
colour = "black",
size = 0.4) +
xlim(0.2,1) +
ylim(-0.1,0.3)
#| label: labelling-function
# creates labels vector for use with plotting functions
labels_size_contrast <- c(A = "Standard Orientation Size\nStandard Orientation Contrast",
B = "Inverted Orientation Size\nInverted Orientation Contrast",
X = "Standard Orientation Size\nInverted Orientation Contrast",
Y = "Inverted Orientation Size\nStandard Orientation Contrast")
labels_all_exp <- c(additive_manipulation = "Size and Contrast Manipulated",
contrast_manipulated = "Contrast Manipulated",
size_manipulated = "Size Manipulated",
standard_plot = "No Manipulation Present")
labels_power <- c(size_power = "Size\nPower",
contrast_power = "Contrast\nPower",
additive_power = "Size and Contrast\nCombined Power")
#| label: fig-est-multi-exp
#| include: true
#| out-width: "100%"
#| fig-asp: 0.33
#| fig-cap: Plotting *r* estimation error against the objective *r* value for contrast and size decay in isolation from previous work, and for their combination in the present study. The dashed line represents 0 error in correlation estimation, and standard deviations are shown as error bars. Note that these curves have been smoothed.
# dataframe containing values from previous work and the current is included
# in the data folder
facet_order <- c("contrast_manipulated", "size_manipulated", "additive_manipulation")
all_exp_df <- read_csv("data/all_exp.csv") %>%
drop_na() %>%
filter(factor != "standard_plot") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(difference), mean = mean(difference)) %>%
mutate(factor = factor(factor, levels = facet_order))
all_exp_df %>%
ggplot(aes(x = my_rs, y = mean)) +
geom_errorbar(mapping = aes(ymin = mean + sd, ymax = mean - sd),width = 0.01, size = 0.3) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 7),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 4, labeller = labeller(factor = labels_all_exp)) +
labs(x = "Objective r",
y = "Mean r Estimation Error") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
xlim(0.2,1) +
geom_hline(yintercept = 0, linetype = 2)
#| label: fig-power-plot
#| include: true
#| out-width: "100%"
#| fig-cap: Power is the different between what is observed when a decay function/combination of decay functions is used and what is observed when no manipulation is used. The dashed line represents the power that would be required to correct for the underestimation of correlation in scatterplots.
# dataframe containing values from previous experiments and the current is included
# in the data folder
curves <- read_csv("data/curves_df.csv")
# create necessary power curve
necessary_power <- curves %>% select(c("my_rs", "standard_curve")) %>%
mutate(mirror = my_rs-standard_curve)
curves %>%
drop_na() %>%
select(c("contrast_power",
"size_power",
"additive_power",
"my_rs")) %>%
pivot_longer(cols = c("contrast_power",
"size_power",
"additive_power"),
names_to = "factor", values_to = "power") %>%
group_by(factor, my_rs) %>%
summarise(sd = sd(power), mean = mean(power)) %>%
ggplot(aes(x = my_rs, y = mean)) +
theme_ggdist() +
scale_y_continuous(breaks = seq(-0.4,1, 0.2)) +
theme(strip.text = element_text(size = 6, margin = margin(1,0,1,0, "mm")), aspect.ratio = 1,
axis.text = element_text(size = 7),
axis.title = element_text(size = 8)) +
facet_wrap(factor ~., ncol = 5, labeller = labeller(factor = labels_power)) +
labs(x = "Objective r",
y = "Power") +
geom_smooth(se = FALSE, colour = "black", size = 0.4) +
geom_smooth(data = necessary_power,
aes(x = my_rs, y = mirror),
se = F,
linetype = 2,
colour = "black",
size = 0.4) +
xlim(0.2,1) +
ylim(-0.1,0.3)
